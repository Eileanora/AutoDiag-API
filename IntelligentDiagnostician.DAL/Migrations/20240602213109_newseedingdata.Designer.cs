// <auto-generated />
using System;
using IntelligentDiagnostician.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IntelligentDiagnostician.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240602213109_newseedingdata")]
    partial class newseedingdata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IntelligentDiagnostician.DataModels.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("IntelligentDiagnostician.DataModels.Models.CarSystem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CarSystemName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CarSystems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarSystemName = "Engine Performance Sensors",
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 562, DateTimeKind.Local).AddTicks(6662),
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 562, DateTimeKind.Local).AddTicks(6702)
                        },
                        new
                        {
                            Id = 2,
                            CarSystemName = "Environmental Sensors",
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 562, DateTimeKind.Local).AddTicks(6755),
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 562, DateTimeKind.Local).AddTicks(6757)
                        },
                        new
                        {
                            Id = 3,
                            CarSystemName = "Cooling System Sensor ",
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 562, DateTimeKind.Local).AddTicks(6759),
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 562, DateTimeKind.Local).AddTicks(6760)
                        },
                        new
                        {
                            Id = 4,
                            CarSystemName = "Fuel System Sensor",
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 562, DateTimeKind.Local).AddTicks(6763),
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 562, DateTimeKind.Local).AddTicks(6764)
                        });
                });

            modelBuilder.Entity("IntelligentDiagnostician.DataModels.Models.Fault", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProblemCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProblemCode");

                    b.HasIndex("UserId");

                    b.ToTable("Faults");
                });

            modelBuilder.Entity("IntelligentDiagnostician.DataModels.Models.Reading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SensorId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("SensorId");

                    b.HasIndex("UserId");

                    b.ToTable("Readings");
                });

            modelBuilder.Entity("IntelligentDiagnostician.DataModels.Models.Sensor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<float?>("AvgValue")
                        .HasColumnType("real");

                    b.Property<int?>("CarSystemId")
                        .HasColumnType("int");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<float?>("MaxValue")
                        .HasColumnType("real");

                    b.Property<float?>("MinValue")
                        .HasColumnType("real");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SensorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.Property<string>("Unit")
                        .HasMaxLength(10)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("CarSystemId");

                    b.ToTable("Sensors");

                    b.HasData(
                        new
                        {
                            Id = 100,
                            AvgValue = 71.5f,
                            CarSystemId = 3,
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 563, DateTimeKind.Local).AddTicks(9915),
                            MaxValue = 99f,
                            MinValue = 44f,
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 563, DateTimeKind.Local).AddTicks(9954),
                            SensorName = "Engine Coolant Temperature",
                            Unit = "°C"
                        },
                        new
                        {
                            Id = 101,
                            AvgValue = 30.5f,
                            CarSystemId = 4,
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 563, DateTimeKind.Local).AddTicks(9959),
                            MaxValue = 47.8f,
                            MinValue = 13.3f,
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 563, DateTimeKind.Local).AddTicks(9960),
                            SensorName = "Throttle Position",
                            Unit = "%"
                        },
                        new
                        {
                            Id = 102,
                            AvgValue = 55.7f,
                            CarSystemId = 2,
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 563, DateTimeKind.Local).AddTicks(9963),
                            MaxValue = 64.9f,
                            MinValue = 36.5f,
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 563, DateTimeKind.Local).AddTicks(9965),
                            SensorName = "Timing Advance",
                            Unit = "%"
                        },
                        new
                        {
                            Id = 103,
                            AvgValue = 39.5f,
                            CarSystemId = 2,
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 563, DateTimeKind.Local).AddTicks(9967),
                            MaxValue = 51f,
                            MinValue = 28f,
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 563, DateTimeKind.Local).AddTicks(9969),
                            SensorName = "Air in Tank Temperature",
                            Unit = "°C"
                        },
                        new
                        {
                            Id = 104,
                            AvgValue = 1913f,
                            CarSystemId = 1,
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 563, DateTimeKind.Local).AddTicks(9972),
                            MaxValue = 3125f,
                            MinValue = 700f,
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 563, DateTimeKind.Local).AddTicks(9973),
                            SensorName = "Engine Rpm ",
                            Unit = "RPM"
                        },
                        new
                        {
                            Id = 105,
                            AvgValue = 63.5f,
                            CarSystemId = 1,
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 563, DateTimeKind.Local).AddTicks(9977),
                            MaxValue = 101f,
                            MinValue = 26f,
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 563, DateTimeKind.Local).AddTicks(9978),
                            SensorName = "Intake Manifold Pressure",
                            Unit = "kPa"
                        },
                        new
                        {
                            Id = 106,
                            AvgValue = 1.4f,
                            CarSystemId = 1,
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 563, DateTimeKind.Local).AddTicks(9981),
                            MaxValue = 2.8f,
                            MinValue = 0f,
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 563, DateTimeKind.Local).AddTicks(9982),
                            SensorName = "Engine Power",
                            Unit = "kW"
                        },
                        new
                        {
                            Id = 107,
                            AvgValue = 57.45f,
                            CarSystemId = 1,
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 563, DateTimeKind.Local).AddTicks(9985),
                            MaxValue = 96.9f,
                            MinValue = 18f,
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 563, DateTimeKind.Local).AddTicks(9986),
                            SensorName = "Engine Load",
                            Unit = "%"
                        });
                });

            modelBuilder.Entity("IntelligentDiagnostician.DataModels.Models.TroubleCode", b =>
                {
                    b.Property<string>("ProblemCode")
                        .HasMaxLength(5)
                        .HasColumnType("varchar");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProblemDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar");

                    b.Property<int?>("Severity")
                        .HasColumnType("int");

                    b.HasKey("ProblemCode");

                    b.ToTable("TroubleCodes");

                    b.HasData(
                        new
                        {
                            ProblemCode = "P0079",
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 564, DateTimeKind.Local).AddTicks(6549),
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 564, DateTimeKind.Local).AddTicks(6595),
                            ProblemDescription = "Exhaust Valve Control Circuit Low (Bank 2)",
                            Severity = 4
                        },
                        new
                        {
                            ProblemCode = "P2004",
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 564, DateTimeKind.Local).AddTicks(6599),
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 564, DateTimeKind.Local).AddTicks(6600),
                            ProblemDescription = "Problem with the Intake Manifold Runner Control (IMRC) actuator, which controls the airflow into the engine",
                            Severity = 6
                        },
                        new
                        {
                            ProblemCode = "P3000",
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 564, DateTimeKind.Local).AddTicks(6602),
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 564, DateTimeKind.Local).AddTicks(6604),
                            ProblemDescription = "Problem with the battery control system",
                            Severity = 8
                        },
                        new
                        {
                            ProblemCode = "P0078",
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 564, DateTimeKind.Local).AddTicks(6606),
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 564, DateTimeKind.Local).AddTicks(6607),
                            ProblemDescription = "Exhaust Valve Control Circuit (Bank 2)",
                            Severity = 3
                        },
                        new
                        {
                            ProblemCode = "P007E",
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 564, DateTimeKind.Local).AddTicks(6610),
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 564, DateTimeKind.Local).AddTicks(6611),
                            ProblemDescription = "Problem with the Charge Air Cooler Temperature Sensor Circuit",
                            Severity = 5
                        },
                        new
                        {
                            ProblemCode = "P2036",
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 564, DateTimeKind.Local).AddTicks(6614),
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 564, DateTimeKind.Local).AddTicks(6615),
                            ProblemDescription = "Problem with the Exhaust Gas Temperature Sensor Circuit",
                            Severity = 4
                        },
                        new
                        {
                            ProblemCode = "P007F",
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 564, DateTimeKind.Local).AddTicks(6618),
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 564, DateTimeKind.Local).AddTicks(6619),
                            ProblemDescription = "Typically related to the fuel temperature sensor",
                            Severity = 5
                        },
                        new
                        {
                            ProblemCode = "P18E0",
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 564, DateTimeKind.Local).AddTicks(6621),
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 564, DateTimeKind.Local).AddTicks(6622),
                            ProblemDescription = "Problem with the Fuel Pressure Sensor Circuit",
                            Severity = 5
                        },
                        new
                        {
                            ProblemCode = "P1004",
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 564, DateTimeKind.Local).AddTicks(6624),
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 564, DateTimeKind.Local).AddTicks(6626),
                            ProblemDescription = "Problem with the Intake Valve Control Solenoid Circuit",
                            Severity = 4
                        },
                        new
                        {
                            ProblemCode = "P18D0",
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 564, DateTimeKind.Local).AddTicks(6629),
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 564, DateTimeKind.Local).AddTicks(6630),
                            ProblemDescription = "Problem with the Exhaust Valve Control Solenoid Circuit",
                            Severity = 4
                        },
                        new
                        {
                            ProblemCode = "P18F0",
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 564, DateTimeKind.Local).AddTicks(6632),
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 564, DateTimeKind.Local).AddTicks(6633),
                            ProblemDescription = "Problem with the Turbocharger Boost Control Solenoid Circuit",
                            Severity = 5
                        },
                        new
                        {
                            ProblemCode = "C1004",
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 564, DateTimeKind.Local).AddTicks(6636),
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 564, DateTimeKind.Local).AddTicks(6637),
                            ProblemDescription = "Related to the Driver Knee Bolster Deployment Control",
                            Severity = 5
                        },
                        new
                        {
                            ProblemCode = "B0004",
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 564, DateTimeKind.Local).AddTicks(6639),
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 564, DateTimeKind.Local).AddTicks(6640),
                            ProblemDescription = "Related to the Driver Knee Bolster Deployment Control",
                            Severity = 4
                        },
                        new
                        {
                            ProblemCode = "U1004",
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 564, DateTimeKind.Local).AddTicks(6642),
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 564, DateTimeKind.Local).AddTicks(6644),
                            ProblemDescription = "Indicates an intermittent Controller Area Network Bus Transmit Performance",
                            Severity = 8
                        },
                        new
                        {
                            ProblemCode = "p0000",
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 564, DateTimeKind.Local).AddTicks(6646),
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 564, DateTimeKind.Local).AddTicks(6647),
                            ProblemDescription = "No Truble Code",
                            Severity = 0
                        });
                });

            modelBuilder.Entity("IntelligentDiagnostician.DataModels.Models.TroubleCodeLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProblemCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("ProblemCode");

                    b.ToTable("TroubleCodeLinks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 565, DateTimeKind.Local).AddTicks(2466),
                            Link = "https://www.obd2pros.com/dtc-codes/p0079/",
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 565, DateTimeKind.Local).AddTicks(2510),
                            ProblemCode = "P0079",
                            Title = "P0079 Code - What Does It Mean?"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 565, DateTimeKind.Local).AddTicks(2515),
                            Link = "https://www.engine-codes.com/p0079.html",
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 565, DateTimeKind.Local).AddTicks(2516),
                            ProblemCode = "P0079",
                            Title = "P0079 Code - Meaning, Causes, & Symptoms"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 565, DateTimeKind.Local).AddTicks(2519),
                            Link = "https://cartreatments.com/p2004-code-imrc-issue-symptoms-causes-and-fixes/",
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 565, DateTimeKind.Local).AddTicks(2520),
                            ProblemCode = "P2004",
                            Title = "P2004 Code - IMRC Issue"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 565, DateTimeKind.Local).AddTicks(2522),
                            Link = "https://www.rxmechanic.com/p3000-error-code/",
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 565, DateTimeKind.Local).AddTicks(2523),
                            ProblemCode = "P3000",
                            Title = "P3000 Error Code - What Does It Mean?"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 565, DateTimeKind.Local).AddTicks(2526),
                            Link = "https://www.troublecodes.net/pcodes/p3000/",
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 565, DateTimeKind.Local).AddTicks(2527),
                            ProblemCode = "P3000",
                            Title = "P3000 - Manufacturer Controlled DTC Bank 1"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 565, DateTimeKind.Local).AddTicks(2531),
                            Link = "https://www.troublecodes.net/pcodes/p0078/",
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 565, DateTimeKind.Local).AddTicks(2532),
                            ProblemCode = "P0078",
                            Title = "P0078 - Exhaust Valve Control Circuit"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 565, DateTimeKind.Local).AddTicks(2534),
                            Link = "https://www.obd-codes.com/p007e",
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 565, DateTimeKind.Local).AddTicks(2535),
                            ProblemCode = "P007E",
                            Title = "P007E - Charge Air Cooler Temp. Sensor Circuit"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 565, DateTimeKind.Local).AddTicks(2537),
                            Link = "https://www.obd-codes.com/p2036",
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 565, DateTimeKind.Local).AddTicks(2539),
                            ProblemCode = "P2036",
                            Title = "P2036 - Exhaust Gas Temp. Sensor Circuit"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 565, DateTimeKind.Local).AddTicks(2541),
                            Link = "https://partsavatar.ca/p007f-obd-ii-trouble-code-charge-air-cooler-temperature-sensor-bank-1-bank-2-correlation-solution",
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 565, DateTimeKind.Local).AddTicks(2542),
                            ProblemCode = "P007F",
                            Title = "P007F - Charge Air Cooler Temp. Sensor Correlation"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 565, DateTimeKind.Local).AddTicks(2545),
                            Link = "http://p18e0.engine-trouble-code.com/",
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 565, DateTimeKind.Local).AddTicks(2546),
                            ProblemCode = "P18E0",
                            Title = "P18E0 - Reason For P18E0 Code"
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 565, DateTimeKind.Local).AddTicks(2549),
                            Link = "https://www.youtube.com/watch?v=DFp6SjLItH4",
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 565, DateTimeKind.Local).AddTicks(2550),
                            ProblemCode = "P1004",
                            Title = "P1004 - How TO Fix"
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 565, DateTimeKind.Local).AddTicks(2552),
                            Link = "http://p18d0.engine-trouble-code.com/",
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 565, DateTimeKind.Local).AddTicks(2553),
                            ProblemCode = "P18D0",
                            Title = "P18D0 - More Details "
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 565, DateTimeKind.Local).AddTicks(2555),
                            Link = "https://dot.report/dtc/P18F0",
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 565, DateTimeKind.Local).AddTicks(2557),
                            ProblemCode = "P18F0",
                            Title = "P18F0 - More Details"
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 565, DateTimeKind.Local).AddTicks(2559),
                            Link = "https://www.autocodes.com/b0004_ford.html",
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 565, DateTimeKind.Local).AddTicks(2560),
                            ProblemCode = "C1004",
                            Title = "C1004 - Related to the Driver Knee Bolster Deployment Control"
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 565, DateTimeKind.Local).AddTicks(2562),
                            Link = "https://www.autocodes.com/b0004_ford.html",
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 565, DateTimeKind.Local).AddTicks(2563),
                            ProblemCode = "B0004",
                            Title = "B0004 - Related to the Driver Knee Bolster Deployment Control"
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(2024, 6, 3, 0, 31, 8, 565, DateTimeKind.Local).AddTicks(2565),
                            Link = "https://www.autocodes.com/u1004.html",
                            ModifiedDate = new DateTime(2024, 6, 3, 0, 31, 8, 565, DateTimeKind.Local).AddTicks(2567),
                            ProblemCode = "U1004",
                            Title = "U1004 - Intermittent Controller Area Network Bus Performance"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("IntelligentDiagnostician.DataModels.Models.Fault", b =>
                {
                    b.HasOne("IntelligentDiagnostician.DataModels.Models.TroubleCode", "TroubleCode")
                        .WithMany()
                        .HasForeignKey("ProblemCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IntelligentDiagnostician.DataModels.Models.AppUser", "User")
                        .WithMany("Errors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TroubleCode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IntelligentDiagnostician.DataModels.Models.Reading", b =>
                {
                    b.HasOne("IntelligentDiagnostician.DataModels.Models.Sensor", "Sensor")
                        .WithMany("Readings")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IntelligentDiagnostician.DataModels.Models.AppUser", "User")
                        .WithMany("Readings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IntelligentDiagnostician.DataModels.Models.Sensor", b =>
                {
                    b.HasOne("IntelligentDiagnostician.DataModels.Models.CarSystem", "CarSystem")
                        .WithMany("Sensors")
                        .HasForeignKey("CarSystemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CarSystem");
                });

            modelBuilder.Entity("IntelligentDiagnostician.DataModels.Models.TroubleCodeLink", b =>
                {
                    b.HasOne("IntelligentDiagnostician.DataModels.Models.TroubleCode", "TroubleCode")
                        .WithMany("TroubleCodeLinks")
                        .HasForeignKey("ProblemCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TroubleCode");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("IntelligentDiagnostician.DataModels.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("IntelligentDiagnostician.DataModels.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IntelligentDiagnostician.DataModels.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("IntelligentDiagnostician.DataModels.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IntelligentDiagnostician.DataModels.Models.AppUser", b =>
                {
                    b.Navigation("Errors");

                    b.Navigation("Readings");
                });

            modelBuilder.Entity("IntelligentDiagnostician.DataModels.Models.CarSystem", b =>
                {
                    b.Navigation("Sensors");
                });

            modelBuilder.Entity("IntelligentDiagnostician.DataModels.Models.Sensor", b =>
                {
                    b.Navigation("Readings");
                });

            modelBuilder.Entity("IntelligentDiagnostician.DataModels.Models.TroubleCode", b =>
                {
                    b.Navigation("TroubleCodeLinks");
                });
#pragma warning restore 612, 618
        }
    }
}
